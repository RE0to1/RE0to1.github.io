{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"javase","date":"2022-07-12T09:00:43.880Z","updated":"2022-10-08T15:00:41.819Z","comments":true,"path":"api/articles/javase.json","keywords":null,"cover":[],"content":"<p>构造方法私有，外界就不能再创建对象了</p>\n<h5 id=\"如何使用帮助文档\"><a href=\"#如何使用帮助文档\" class=\"headerlink\" title=\"如何使用帮助文档\"></a>如何使用帮助文档</h5><p>1：打开帮助文档</p>\n<p>2：点击显示，找到索引，看到输入框</p>\n<p>3：知道你要找谁？以Scanner举例</p>\n<p>4：再输入框里面输入Scanner，然后回车</p>\n<p>5：看包 java.lang包下的类不需要导入，其他的全部需要导入</p>\n<p>6：再简单的看看类的解释和说明，别忘了看该类的版本</p>\n<p>7：看类的结构</p>\n<p>成员变量  字段摘要</p>\n<p>构造方法 构造方法摘要</p>\n<p>成员方法  方法摘要</p>\n<p>8：学习构造方法</p>\n<p>A:有构造方法 就创造对象</p>\n<p>B:没有构造方法   成员可能都是静态的</p>\n<p>9：节哀吧成员方法</p>\n<p>A:左边</p>\n<p>是否静态：如果静态，可以通过类名调用</p>\n<p>返回值类型：人家返回什么，你就用什么接收</p>\n<p>B:</p>\n<p>看方法名：方法名称不要写错</p>\n<p>参数列表：有几个写几个</p>\n<h5 id=\"代码块：再java中，使用-括起来的代码被称为代码块\"><a href=\"#代码块：再java中，使用-括起来的代码被称为代码块\" class=\"headerlink\" title=\"代码块：再java中，使用{}括起来的代码被称为代码块\"></a>代码块：再java中，使用{}括起来的代码被称为代码块</h5><p>局部代码块：局部位置，再方法中出现；限定变量生命周期，及早释放提高内存利用率</p>\n<p>构造代码块：在类中的成员位置用{}括起来的代码。每次调用构造方法执行前，都会线执行构造代码块</p>\n<p>作用：可以把多个构造方法中的共同代码放在一起</p>\n<p>静态代码块：在类中的成员位置用{}括起来的代码。只不过它用static修饰</p>\n<p>作用：一般事对类进行初始化</p>\n<h5 id=\"静态代码块，构造代码块，构造方法的执行顺序？\"><a href=\"#静态代码块，构造代码块，构造方法的执行顺序？\" class=\"headerlink\" title=\"静态代码块，构造代码块，构造方法的执行顺序？\"></a>静态代码块，构造代码块，构造方法的执行顺序？</h5><p>静态代码块–构造代码块—构造方法</p>\n<p>静态代码块：只执行一次</p>\n<p>构造代码块：每次调用构造方法都执行</p>\n<h5 id=\"继承概述：把多个类中相同的内容给提取出来定义道一个类中。\"><a href=\"#继承概述：把多个类中相同的内容给提取出来定义道一个类中。\" class=\"headerlink\" title=\"继承概述：把多个类中相同的内容给提取出来定义道一个类中。\"></a>继承概述：把多个类中相同的内容给提取出来定义道一个类中。</h5><p>class 子类名 extends 父类名{ }</p>\n<p>好处：a提高代码复用性b提高代码的维护性c让类与类产生关系，是多态的前提</p>\n<p>类与类产生了关系，其实也是继承的一个弊端？</p>\n<p>类的耦合性增强了</p>\n<p>开发原创：低耦合，高内聚。</p>\n<p>耦合：类与类的关系</p>\n<p>内聚：就是自己完成某件事情的能力</p>\n<p>Java中继承的特点：</p>\n<p>A：Java只支持单继承，不支持多继承、有些语言是支持多继承的</p>\n<p>B：java支持多层继承（继承体系）</p>\n<p>继承的注意事项：</p>\n<p>A：子类只能继承父类所有非私有的成员（成员方法和成员变量）</p>\n<p>B：子类不能继承父类的构造方法，但是可以通过super关键字去访问父类构造方法</p>\n<p>C：不要为了部分功能而去继承</p>\n<p>那么我们什么时候考虑使用继承呢？</p>\n<p>继承其实体现的是一种”is a“。</p>\n<p>采用假设法：</p>\n<p>如果有两个类A,B只有他们符号A是B的一种，或者B是A的一种，就可以考虑使用继承</p>\n<p>继承中成员变量的关系：</p>\n<p>A:子类中的成员变量和父类的成员变量名称不一样</p>\n<p>B:子类中的成员变量和父类的成员变量名称一样(就近原则)</p>\n<p>在子类方法中访问一个变量的查找顺序：</p>\n<p>a：在子类方法中的局部范围找，有就用</p>\n<p>b：在子类的成员范围找，有就用</p>\n<p>c:在父类的成员范围找，有就用</p>\n<p>成员范围看不见成员方法的内部变量</p>\n<p>问题：我不仅仅要输出局部范围的num，还要输出本类成员范围的num怎么办？父类成员范围？用this.变量名 。super.变量名</p>\n<h5 id=\"this和super的区别？\"><a href=\"#this和super的区别？\" class=\"headerlink\" title=\"this和super的区别？\"></a>this和super的区别？</h5><p>分别是什么？</p>\n<p>this代表本类对应的引用</p>\n<p>super代表父类存储空间的标识（可以理解为父类引用，可以操作父类的成员）</p>\n<p>怎么用呢？</p>\n<p>A：调用成员变量</p>\n<p>this.成员变量 调用本类的成员变量</p>\n<p>super.成员变量调用父类的成员变量</p>\n<p>B:调用构造方法</p>\n<p>this（…）调用本类的构造方法</p>\n<p>super（…）调用父类的构造方法</p>\n<p>C:调用成员方法</p>\n<p>this.成员方法    调用本类的成员方法</p>\n<p>super.成员方法  调用父类的成员方法</p>\n<p>继承中构造方法的关系</p>\n<p>A：子类中所有构造方法默认都会访问父类中空参数的构造方法</p>\n<p>B:为什么？因为子类会继承父类中的数据，还可能使用父类的数据，所有子类初始化之前，一定要先完成父类数据的初始化。</p>\n<p>注意：子类每一个构造方法的第一条语句默认都是：super（）；</p>\n<p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220712205337671.png\" alt=\"image-20220712205337671\"></p>\n<p>如果父类没有无参构造方法，那么子类中的构造方法会出现什么现象如何解决？</p>\n<p>报错</p>\n<p>如何解决？</p>\n<p>A:在父类中加一个无参构造方法</p>\n<p>B:通过super关键字去显示的调用父类的带参构构造方法</p>\n<p>C：子类通过this去调用本类的其他构造方法</p>\n<p>子类中一定要有一个去访问父类的构造方法，否则父类数据就没有初始化</p>\n<p>注意事项：</p>\n<p>this（…）或者super（…）必须出现在第一条语句上。</p>\n<p>如果不是放在第一条语句上，就可能对父类的数据进行多次初始化</p>\n<h5 id=\"一个类的初始化过程\"><a href=\"#一个类的初始化过程\" class=\"headerlink\" title=\"一个类的初始化过程\"></a>一个类的初始化过程</h5><p>成员变量初始化–默认初始化–显示初始化–构造方法初始化</p>\n<p>继承中·成员方法的关系</p>\n<p>如果子类中的方法和父类中的方法声明一样？</p>\n<p>通过子类对象调用方法：</p>\n<p>A先找子类中，看有没有这个方法有就用</p>\n<p>b再看父类中，有没有这个方法，有就用</p>\n<p>c如果没有报错</p>\n<h5 id=\"方法重写的注意事项\"><a href=\"#方法重写的注意事项\" class=\"headerlink\" title=\"方法重写的注意事项\"></a>方法重写的注意事项</h5><p>A:父类中私有方法不能被重写因为父类私有方法子类根本就无法继承</p>\n<p>B：子类重写父类的方法时，访问权限不能更低</p>\n<p>c：父类静态方法，子类也必须通过静态方法进行重写</p>\n<h5 id=\"final-最终的意思。它可以修饰类，方法，变量\"><a href=\"#final-最终的意思。它可以修饰类，方法，变量\" class=\"headerlink\" title=\"final:最终的意思。它可以修饰类，方法，变量\"></a>final:最终的意思。它可以修饰类，方法，变量</h5><p>特点：</p>\n<p>final可以修饰类，该类不能被继承</p>\n<p>final可以修饰方法，该方法不能被重写</p>\n<p>final可以修饰变量，该变量不能被重新赋值，因为这个变量其实是常量</p>\n<p>final修饰局部变量A.基本类型 值不能变B.引用类型地址不能变。</p>\n<p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220714160813607.png\" alt=\"image-20220714160813607\"></p>\n<p>final 修饰变量的初始化时机：</p>\n<p>A:被final修饰的变量只能赋值一次</p>\n<p>B:在构造方法完毕前。（非静态的常量）</p>\n<h5 id=\"多态：同一（对象）事物，在不同时刻体现出来的不同状态\"><a href=\"#多态：同一（对象）事物，在不同时刻体现出来的不同状态\" class=\"headerlink\" title=\"多态：同一（对象）事物，在不同时刻体现出来的不同状态\"></a>多态：同一（对象）事物，在不同时刻体现出来的不同状态</h5><p>多态的前提：</p>\n<p>A要有继承关系</p>\n<p>B要有方法重写</p>\n<p>C要有父类引用指向子类对象</p>\n<p>父 f  &#x3D; new 子（）；</p>\n<p>多态访问成员特点</p>\n<p>A:成员变量</p>\n<p>编译看左边，运行看右边</p>\n<p>B构造方法</p>\n<p>创建子类对象的时候访问父类的构造方法，对父类数据进行初始化</p>\n<p>C：成员方法</p>\n<p>编译看左边，运行看右边</p>\n<p>D：静态方法</p>\n<p>编译看左边，运行看做左边</p>\n<p>（静态和类相关，算不算重写，所有访问还是左边）</p>\n<p>多态的好处：</p>\n<p>A：提高了代码的维护性（继承保证）</p>\n<p>B：提高了代码的扩展性（多态保证）</p>\n<p>多态的弊端：</p>\n<p>不能使用子类的特有功能</p>\n<p>怎么用？</p>\n<p>A：创建子类对象调用方法即可。（可以，但是很多时候不合理，并且占内存）</p>\n<p>B:把父类的引用强制转换为子类的引用（向下转型）</p>\n<p>对象间的转型问题：</p>\n<p>向上转型：</p>\n<p>Fu f &#x3D;new Zi();</p>\n<p>向下转型：</p>\n<p>Zi z &#x3D;(Zi)f;&#x2F;&#x2F;要求该f必须是能够转换为Zi的</p>\n<h5 id=\"抽象类的概述：\"><a href=\"#抽象类的概述：\" class=\"headerlink\" title=\"抽象类的概述：\"></a>抽象类的概述：</h5><p>动物不应该定义为具体的东西，而且动物中的吃，睡等也不应该是具体的。</p>\n<p>我们把一个不是具体的功能称为抽象的功能，而一个类中如果有抽象的功能，该类必须是抽象类</p>\n<p>抽象类的特点：</p>\n<p>A：抽象类和抽象方法必须用abstract关键字修饰</p>\n<p>B:抽象类中不一定有抽象方法，但又抽象方法的类一定是抽象类</p>\n<p>C:抽象类不能实例化    因为它不是具体的。抽象类又构造方法，但是不能实例化？构造方法的作用是什么呢？用于子类访问父类数据的初始化</p>\n<p>D：抽象的子类</p>\n<p>​\ta：抽象类的子类是一个抽象类</p>\n<p>​\tb:重写所有的抽象方法，这个时候子类是是一个具体的类</p>\n<p>抽象类的实例化其实是靠具体的子类实现的是多态的方式</p>\n<p>Animal a &#x3D; new Cat（）；</p>\n<p>抽象类的成员特点：</p>\n<p>成员变量：既可以是变量，也可以是常量</p>\n<p>构造方法：有用于子类访问父类数据的初始化</p>\n<p>成员方法：既可以是抽象的，也可以是非抽象的。</p>\n<p>抽象类的成员方法特性：</p>\n<p>A：抽象方法强制要求子类做的事情</p>\n<p>B：非抽象方法子类继承的事情提高代码复用性</p>\n<p>abstract不能和哪些关键字共存</p>\n<p>private 冲突</p>\n<p>final 冲突</p>\n<p>static 无意义</p>\n<h5 id=\"接口特点\"><a href=\"#接口特点\" class=\"headerlink\" title=\"接口特点\"></a>接口特点</h5><p>A：接口用关键字interface表示</p>\n<p>interface 接口名{}</p>\n<p>B:类实现1接口用implements表示</p>\n<p>class 类名 implements 接口名{}                                                                                                                                                                         </p>\n<p>C:接口不能实例化</p>\n<p>那么，接口如何实例化呢？</p>\n<p>按多态的方式来实例化</p>\n<p>D:接口的子类</p>\n<p>a;可以是抽象类但意义不大</p>\n<p>b;可以是具体类，要重写接口中的所有抽象方法     </p>\n<p>接口成员特点</p>\n<p>成员变量：只能是常量，并且是静态的</p>\n<p>默认修饰符public static final   建议：自己手动给出</p>\n<p>构造方法：接口没有构造方法</p>\n<p>成员方法：只能是抽象方法</p>\n<p>默认修饰符public static </p>\n<p>形式参数</p>\n<p>基本类型</p>\n<p>引用类型：</p>\n<p>​\t\t\t\t类名（匿名对象）需要该类的对象实例</p>\n<p>​\t\t\t\t抽象类：需要的是该抽象的类子类对象</p>\n<p>​\t\t\t\t接口：需要该接口的实现类对象</p>\n<p>返回类型</p>\n<p>​\t\t\t\t类名 返回的是该类的对象实例</p>\n<p>​\t\t\t\t抽象类：返回的是该抽象的类子类对象</p>\n<p>​\t\t\t\t接口：返回的是接口的实现类对象</p>\n<p>链式编程:每次调用完毕方法后，返回的是一个对象。</p>\n<p>包：</p>\n<p>​\t\tA:文件夹</p>\n<p>​\t\tB:作用 ————</p>\n<p>​\t\t\t\t\ta:对类进行分类管理</p>\n<p>​\t\t\t\t\tb：吧相同类名放到不同的包中</p>\n<p>导包：</p>\n<p>​\t\t\t格式： import 包名;</p>\n<p>修饰符</p>\n<p>​\t\t\t权限修饰符</p>\n<p>​\t\t\t状态修饰符  static final </p>\n<p>​\t\t\t抽象修饰符  abstract</p>\n<p>类：</p>\n<p>默认，public，final，abstract</p>\n<p>成员变量：</p>\n<p>private，默认，protected，public，static，final</p>\n<p>构造方法：private，默认，protected，public</p>\n<p>成员方法：都可以</p>\n<h5 id=\"内部类：把类定义在其他类的内部\"><a href=\"#内部类：把类定义在其他类的内部\" class=\"headerlink\" title=\"内部类：把类定义在其他类的内部\"></a>内部类：把类定义在其他类的内部</h5><p>内部类特点：A：内部类可以直接访问外部类的成员，包括私有、</p>\n<p>​\t\t\t\t\t\tB：外部类要访问内部类的成员，必须创建对象</p>\n<p>内部类的位置</p>\n<p>​\t\t\t\t\t成员位置：定义在成员位置的类，称为成员内部类</p>\n<p>​\t\t\t\t\t局部位置：定义在局部位置的类，称为局部内部类</p>\n<p>格式：外部类名.内部类名    对象名 &#x3D; 外部类对象.内部类对象</p>\n<p>局部内部类访问局部变量必须用final 修饰   ？</p>\n<p>局部变量会随方法结束而消失，但对象可能还需要使用这个变量，堆内存不会因此而消失</p>\n<p>匿名内部类</p>\n<p>​\t\t\t就是内部类的简化写法</p>\n<p>前提：存在一个类或者接口</p>\n<p> 格式：new 类名或者接口名（）{</p>\n<p>​\t\t\t重写方法；\t\t\t</p>\n<p>}</p>\n<p>本质：是一个继承了该类或者实现了该接口的子类匿名对象</p>\n<p>object类的方法：</p>\n<p>public int hashCode();返回该对象的哈希码值。</p>\n<p>哈希值与地址有关但不是地址值</p>\n<p>public final Class getClass(); 返回此Object 的运行时类Class类的方法;</p>\n<p>equals:只比较引用类型默认比地址值</p>\n<p>protected void finalize();当垃圾回收器确定不存在该对象的更多引用是，由对象的垃圾回收器调用此方法，用于垃圾回收，但什么时候回收不确定</p>\n<p>protected Object clone();创建并返回此对象的一个副本</p>\n<h5 id=\"Scanner\"><a href=\"#Scanner\" class=\"headerlink\" title=\"Scanner\"></a>Scanner</h5><p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220815084153914.png\" alt=\"image-20220815084153914\"></p>\n<p>字符串：多个字符组成的数据</p>\n<p>字符串如果是变量，先开空间再拼接</p>\n<p>字符串如果是常量，先去常量池中找，若有返回，没有创建</p>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220809083041795.png\" alt=\"image-20220809083041795\"></p>\n<p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220809083700590.png\" alt=\"image-20220809083700590\"></p>\n<p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220809103200776.png\" alt=\"image-20220809103200776\"></p>\n<p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220809145328568.png\" alt=\"image-20220809145328568\"></p>\n<p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220809153616449.png\" alt=\"image-20220809153616449\"></p>\n<p>StringBuffer（）</p>\n<p>&lt;1&gt;用字符串做拼接，比较耗时并且也耗内存，而且这种拼接操作又是比较常见的，为了解决这个问题java提供了一个字符缓冲区类。StringBuffer供我们使用</p>\n<p>线程安全的可变字符串</p>\n<p>StringBuffer和String 的区别？</p>\n<p>前者长度内容可变后者不可变</p>\n<p>如果使用前者做字符串拼接，不会浪费太多资源</p>\n<p>&lt;2&gt;StringBuffer的构造方法</p>\n<p>public StringBuffer()  无参构造</p>\n<p>public StringBuffer(int capacity)：指定容量的字符串缓冲区对象</p>\n<p>public StringBuffer(String str)  :指定字符串的字符串缓冲区对象</p>\n<p>StringBuffer的方法：</p>\n<p>public int capacity()  ：返回当前容量 </p>\n<p>public int length()  :返回长度</p>\n<p>append：把任意类型数据添加道字符串缓冲区里面，并返回字符串缓冲区本身</p>\n<p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220823135109499.png\" alt=\"image-20220823135109499\"></p>\n<p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220823135614489.png\" alt=\"image-20220823135614489\"></p>\n<h4 id=\"常见对象\"><a href=\"#常见对象\" class=\"headerlink\" title=\"常见对象\"></a>常见对象</h4><p>Integer</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">* 常见进制转换\n* public static String toBinaryString(int i)\n*                      toOctalString(int i)\n*                       toHexString(int i)\n* 十进制转其他进制\n* Public static String  toString(itn i,int radix)\n*\n*其他进制转到十进制\n* public static int parseInt(String s,int radix)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>jdk1.5新特性</p>\n<p>自动装箱：把基本类型转换为包装类类型</p>\n<p>自动拆箱：把包装类型转换为基本类型</p>\n<p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220928130903954.png\" alt=\"image-20220928130903954\"></p>\n<p>注意：在使用中，Interger x &#x3D;null; 代码就会出现NullPointerException</p>\n<p>Character类</p>\n<p>对象中包装一个基本类型char的值</p>\n<p>此外，该类提供了几种方法，已确定字符的类别（小写字母，数字，等等），并将字符从大写转换成小写，反之亦然</p>\n<p>方法</p>\n<p>public static boolean isUpperCase(char ch)：判断字符是否是大写</p>\n<p>isLowerCase(char ch) :判断给定的字符是否是小写字符</p>\n<p>isDigit（char ch）：判断给定的字符是否是数字字符</p>\n<p>public staitc char toUpperCase(char ch):把给定的字符转换成大写字符</p>\n<p>toLowerCase(char ch):把给定字符转换为小写字符</p>\n<p>正则表达式</p>\n<p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220928184712409.png\" alt=\"image-20220928184712409\"></p>\n<p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220928184729884.png\" alt=\"image-20220928184729884\"></p>\n<p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220928220504302.png\" alt=\"image-20220928220504302\"></p>\n<p>Math类概述及其成员方法</p>\n<p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221008153509900.png\" alt=\"image-20221008153509900\"></p>\n<p>System类</p>\n<p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221008153809674.png\" alt=\"image-20221008153809674\"></p>\n<p>gc ：垃圾回收器</p>\n<p>exit：终止当前正在运行的Java虚拟机.参数用作状态码；根据惯例，非零的状态码表示异常终止</p>\n<p>currentTimeMillis():返回以毫米为单位的当前时间</p>\n<p>arraycopy:从指定数组中复制一个数组，复制从指定位置开始，到目标数组指定位置结束</p>\n<p>BigDecimal类</p>\n<p><img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221008162953084.png\" alt=\"image-20221008162953084\"></p>\n","text":"构造方法私有，外界就不能再创建对象了 如何使用帮助文档1：打开帮助文档 2：点击显示，找到索引，看到输入框 3：知道你要找谁？以Scanner举例 4：再输入框里面输入Scanner，然后回车 5：看包 java.lang包下的类不需要导入，其他的全部需要导入 6：再简单的看看类...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">如何使用帮助文档</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%9A%E5%86%8Djava%E4%B8%AD%EF%BC%8C%E4%BD%BF%E7%94%A8-%E6%8B%AC%E8%B5%B7%E6%9D%A5%E7%9A%84%E4%BB%A3%E7%A0%81%E8%A2%AB%E7%A7%B0%E4%B8%BA%E4%BB%A3%E7%A0%81%E5%9D%97\"><span class=\"toc-text\">代码块：再java中，使用{}括起来的代码被称为代码块</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%8C%E6%9E%84%E9%80%A0%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%8C%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%EF%BC%9F\"><span class=\"toc-text\">静态代码块，构造代码块，构造方法的执行顺序？</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF%E6%A6%82%E8%BF%B0%EF%BC%9A%E6%8A%8A%E5%A4%9A%E4%B8%AA%E7%B1%BB%E4%B8%AD%E7%9B%B8%E5%90%8C%E7%9A%84%E5%86%85%E5%AE%B9%E7%BB%99%E6%8F%90%E5%8F%96%E5%87%BA%E6%9D%A5%E5%AE%9A%E4%B9%89%E9%81%93%E4%B8%80%E4%B8%AA%E7%B1%BB%E4%B8%AD%E3%80%82\"><span class=\"toc-text\">继承概述：把多个类中相同的内容给提取出来定义道一个类中。</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#this%E5%92%8Csuper%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">this和super的区别？</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%B8%AA%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">一个类的初始化过程</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">方法重写的注意事项</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#final-%E6%9C%80%E7%BB%88%E7%9A%84%E6%84%8F%E6%80%9D%E3%80%82%E5%AE%83%E5%8F%AF%E4%BB%A5%E4%BF%AE%E9%A5%B0%E7%B1%BB%EF%BC%8C%E6%96%B9%E6%B3%95%EF%BC%8C%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">final:最终的意思。它可以修饰类，方法，变量</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%80%81%EF%BC%9A%E5%90%8C%E4%B8%80%EF%BC%88%E5%AF%B9%E8%B1%A1%EF%BC%89%E4%BA%8B%E7%89%A9%EF%BC%8C%E5%9C%A8%E4%B8%8D%E5%90%8C%E6%97%B6%E5%88%BB%E4%BD%93%E7%8E%B0%E5%87%BA%E6%9D%A5%E7%9A%84%E4%B8%8D%E5%90%8C%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">多态：同一（对象）事物，在不同时刻体现出来的不同状态</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">抽象类的概述：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">接口特点</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%9A%E6%8A%8A%E7%B1%BB%E5%AE%9A%E4%B9%89%E5%9C%A8%E5%85%B6%E4%BB%96%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8\"><span class=\"toc-text\">内部类：把类定义在其他类的内部</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Scanner\"><span class=\"toc-text\">Scanner</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">例子</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">常见对象</span></a>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2022-10-10T08:29:03.534Z","updated":"2022-10-10T08:29:03.534Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":430,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}